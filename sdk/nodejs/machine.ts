// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Machine extends pulumi.CustomResource {
    /**
     * Get an existing Machine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MachineState, opts?: pulumi.CustomResourceOptions): Machine {
        return new Machine(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fly:index/machine:Machine';

    /**
     * Returns true if the given object is an instance of Machine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Machine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Machine.__pulumiType;
    }

    /**
     * The App this resource will be created in
     */
    public readonly app!: pulumi.Output<string>;
    /**
     * Optional boolean telling the Machine to destroy itself once it's complete
     */
    public readonly autoDestroy!: pulumi.Output<boolean>;
    public readonly cmds!: pulumi.Output<string[] | undefined>;
    /**
     * Which machine flavor, ex: `shared`
     */
    public readonly cpuType!: pulumi.Output<string>;
    public readonly cpus!: pulumi.Output<number>;
    public readonly entrypoints!: pulumi.Output<string[] | undefined>;
    /**
     * Keys and values must be strings
     */
    public readonly env!: pulumi.Output<{[key: string]: string}>;
    public readonly execs!: pulumi.Output<string[] | undefined>;
    /**
     * Protocol-less docker image, ex: `registry.fly.io/myapp:mytag`
     */
    public readonly image!: pulumi.Output<string>;
    /**
     * Amount of memory in MB. `256`, `512`, `1024`, ...
     */
    public readonly memory!: pulumi.Output<number>;
    public readonly mounts!: pulumi.Output<outputs.MachineMount[] | undefined>;
    /**
     * A user-provided identifier
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly privateIp!: pulumi.Output<string>;
    /**
     * Fly region, ex `ord`, `sin`, `mad`
     */
    public readonly region!: pulumi.Output<string>;
    public readonly services!: pulumi.Output<outputs.MachineService[] | undefined>;

    /**
     * Create a Machine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MachineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MachineArgs | MachineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MachineState | undefined;
            resourceInputs["app"] = state ? state.app : undefined;
            resourceInputs["autoDestroy"] = state ? state.autoDestroy : undefined;
            resourceInputs["cmds"] = state ? state.cmds : undefined;
            resourceInputs["cpuType"] = state ? state.cpuType : undefined;
            resourceInputs["cpus"] = state ? state.cpus : undefined;
            resourceInputs["entrypoints"] = state ? state.entrypoints : undefined;
            resourceInputs["env"] = state ? state.env : undefined;
            resourceInputs["execs"] = state ? state.execs : undefined;
            resourceInputs["image"] = state ? state.image : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["mounts"] = state ? state.mounts : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateIp"] = state ? state.privateIp : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
        } else {
            const args = argsOrState as MachineArgs | undefined;
            if ((!args || args.app === undefined) && !opts.urn) {
                throw new Error("Missing required property 'app'");
            }
            if ((!args || args.image === undefined) && !opts.urn) {
                throw new Error("Missing required property 'image'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["app"] = args ? args.app : undefined;
            resourceInputs["autoDestroy"] = args ? args.autoDestroy : undefined;
            resourceInputs["cmds"] = args ? args.cmds : undefined;
            resourceInputs["cpuType"] = args ? args.cpuType : undefined;
            resourceInputs["cpus"] = args ? args.cpus : undefined;
            resourceInputs["entrypoints"] = args ? args.entrypoints : undefined;
            resourceInputs["env"] = args ? args.env : undefined;
            resourceInputs["execs"] = args ? args.execs : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["mounts"] = args ? args.mounts : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["privateIp"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Machine.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Machine resources.
 */
export interface MachineState {
    /**
     * The App this resource will be created in
     */
    app?: pulumi.Input<string>;
    /**
     * Optional boolean telling the Machine to destroy itself once it's complete
     */
    autoDestroy?: pulumi.Input<boolean>;
    cmds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Which machine flavor, ex: `shared`
     */
    cpuType?: pulumi.Input<string>;
    cpus?: pulumi.Input<number>;
    entrypoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Keys and values must be strings
     */
    env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    execs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Protocol-less docker image, ex: `registry.fly.io/myapp:mytag`
     */
    image?: pulumi.Input<string>;
    /**
     * Amount of memory in MB. `256`, `512`, `1024`, ...
     */
    memory?: pulumi.Input<number>;
    mounts?: pulumi.Input<pulumi.Input<inputs.MachineMount>[]>;
    /**
     * A user-provided identifier
     */
    name?: pulumi.Input<string>;
    privateIp?: pulumi.Input<string>;
    /**
     * Fly region, ex `ord`, `sin`, `mad`
     */
    region?: pulumi.Input<string>;
    services?: pulumi.Input<pulumi.Input<inputs.MachineService>[]>;
}

/**
 * The set of arguments for constructing a Machine resource.
 */
export interface MachineArgs {
    /**
     * The App this resource will be created in
     */
    app: pulumi.Input<string>;
    /**
     * Optional boolean telling the Machine to destroy itself once it's complete
     */
    autoDestroy?: pulumi.Input<boolean>;
    cmds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Which machine flavor, ex: `shared`
     */
    cpuType?: pulumi.Input<string>;
    cpus?: pulumi.Input<number>;
    entrypoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Keys and values must be strings
     */
    env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    execs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Protocol-less docker image, ex: `registry.fly.io/myapp:mytag`
     */
    image: pulumi.Input<string>;
    /**
     * Amount of memory in MB. `256`, `512`, `1024`, ...
     */
    memory?: pulumi.Input<number>;
    mounts?: pulumi.Input<pulumi.Input<inputs.MachineMount>[]>;
    /**
     * A user-provided identifier
     */
    name?: pulumi.Input<string>;
    /**
     * Fly region, ex `ord`, `sin`, `mad`
     */
    region: pulumi.Input<string>;
    services?: pulumi.Input<pulumi.Input<inputs.MachineService>[]>;
}
