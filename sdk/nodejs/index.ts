// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AppArgs, AppState } from "./app";
export type App = import("./app").App;
export const App: typeof import("./app").App = null as any;
utilities.lazyLoad(exports, ["App"], () => require("./app"));

export { CertArgs, CertState } from "./cert";
export type Cert = import("./cert").Cert;
export const Cert: typeof import("./cert").Cert = null as any;
utilities.lazyLoad(exports, ["Cert"], () => require("./cert"));

export { GetAppArgs, GetAppResult, GetAppOutputArgs } from "./getApp";
export const getApp: typeof import("./getApp").getApp = null as any;
export const getAppOutput: typeof import("./getApp").getAppOutput = null as any;
utilities.lazyLoad(exports, ["getApp","getAppOutput"], () => require("./getApp"));

export { GetCertArgs, GetCertResult, GetCertOutputArgs } from "./getCert";
export const getCert: typeof import("./getCert").getCert = null as any;
export const getCertOutput: typeof import("./getCert").getCertOutput = null as any;
utilities.lazyLoad(exports, ["getCert","getCertOutput"], () => require("./getCert"));

export { GetIpArgs, GetIpResult, GetIpOutputArgs } from "./getIp";
export const getIp: typeof import("./getIp").getIp = null as any;
export const getIpOutput: typeof import("./getIp").getIpOutput = null as any;
utilities.lazyLoad(exports, ["getIp","getIpOutput"], () => require("./getIp"));

export { GetVolumeArgs, GetVolumeResult, GetVolumeOutputArgs } from "./getVolume";
export const getVolume: typeof import("./getVolume").getVolume = null as any;
export const getVolumeOutput: typeof import("./getVolume").getVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getVolume","getVolumeOutput"], () => require("./getVolume"));

export { IpArgs, IpState } from "./ip";
export type Ip = import("./ip").Ip;
export const Ip: typeof import("./ip").Ip = null as any;
utilities.lazyLoad(exports, ["Ip"], () => require("./ip"));

export { MachineArgs, MachineState } from "./machine";
export type Machine = import("./machine").Machine;
export const Machine: typeof import("./machine").Machine = null as any;
utilities.lazyLoad(exports, ["Machine"], () => require("./machine"));

export * from "./provider";
import { Provider } from "./provider";

export { VolumeArgs, VolumeState } from "./volume";
export type Volume = import("./volume").Volume;
export const Volume: typeof import("./volume").Volume = null as any;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "fly:index/app:App":
                return new App(name, <any>undefined, { urn })
            case "fly:index/cert:Cert":
                return new Cert(name, <any>undefined, { urn })
            case "fly:index/ip:Ip":
                return new Ip(name, <any>undefined, { urn })
            case "fly:index/machine:Machine":
                return new Machine(name, <any>undefined, { urn })
            case "fly:index/volume:Volume":
                return new Volume(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("fly", "index/app", _module)
pulumi.runtime.registerResourceModule("fly", "index/cert", _module)
pulumi.runtime.registerResourceModule("fly", "index/ip", _module)
pulumi.runtime.registerResourceModule("fly", "index/machine", _module)
pulumi.runtime.registerResourceModule("fly", "index/volume", _module)
pulumi.runtime.registerResourcePackage("fly", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:fly") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
