// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-fly/sdk/go/fly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Machine struct {
	pulumi.CustomResourceState

	// The App this resource will be created in
	App pulumi.StringOutput `pulumi:"app"`
	// Optional boolean telling the Machine to destroy itself once it's complete
	AutoDestroy pulumi.BoolOutput        `pulumi:"autoDestroy"`
	Cmds        pulumi.StringArrayOutput `pulumi:"cmds"`
	// Which machine flavor, ex: `shared`
	CpuType     pulumi.StringOutput      `pulumi:"cpuType"`
	Cpus        pulumi.IntOutput         `pulumi:"cpus"`
	Entrypoints pulumi.StringArrayOutput `pulumi:"entrypoints"`
	// Keys and values must be strings
	Env   pulumi.StringMapOutput   `pulumi:"env"`
	Execs pulumi.StringArrayOutput `pulumi:"execs"`
	// Protocol-less docker image, ex: `registry.fly.io/myapp:mytag`
	Image pulumi.StringOutput `pulumi:"image"`
	// Amount of memory in MB. `256`, `512`, `1024`, ...
	Memory pulumi.IntOutput        `pulumi:"memory"`
	Mounts MachineMountArrayOutput `pulumi:"mounts"`
	// A user-provided identifier
	Name      pulumi.StringOutput `pulumi:"name"`
	PrivateIp pulumi.StringOutput `pulumi:"privateIp"`
	// Fly region, ex `ord`, `sin`, `mad`
	Region   pulumi.StringOutput       `pulumi:"region"`
	Services MachineServiceArrayOutput `pulumi:"services"`
}

// NewMachine registers a new resource with the given unique name, arguments, and options.
func NewMachine(ctx *pulumi.Context,
	name string, args *MachineArgs, opts ...pulumi.ResourceOption) (*Machine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.App == nil {
		return nil, errors.New("invalid value for required argument 'App'")
	}
	if args.Image == nil {
		return nil, errors.New("invalid value for required argument 'Image'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Machine
	err := ctx.RegisterResource("fly:index/machine:Machine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMachine gets an existing Machine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMachine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MachineState, opts ...pulumi.ResourceOption) (*Machine, error) {
	var resource Machine
	err := ctx.ReadResource("fly:index/machine:Machine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Machine resources.
type machineState struct {
	// The App this resource will be created in
	App *string `pulumi:"app"`
	// Optional boolean telling the Machine to destroy itself once it's complete
	AutoDestroy *bool    `pulumi:"autoDestroy"`
	Cmds        []string `pulumi:"cmds"`
	// Which machine flavor, ex: `shared`
	CpuType     *string  `pulumi:"cpuType"`
	Cpus        *int     `pulumi:"cpus"`
	Entrypoints []string `pulumi:"entrypoints"`
	// Keys and values must be strings
	Env   map[string]string `pulumi:"env"`
	Execs []string          `pulumi:"execs"`
	// Protocol-less docker image, ex: `registry.fly.io/myapp:mytag`
	Image *string `pulumi:"image"`
	// Amount of memory in MB. `256`, `512`, `1024`, ...
	Memory *int           `pulumi:"memory"`
	Mounts []MachineMount `pulumi:"mounts"`
	// A user-provided identifier
	Name      *string `pulumi:"name"`
	PrivateIp *string `pulumi:"privateIp"`
	// Fly region, ex `ord`, `sin`, `mad`
	Region   *string          `pulumi:"region"`
	Services []MachineService `pulumi:"services"`
}

type MachineState struct {
	// The App this resource will be created in
	App pulumi.StringPtrInput
	// Optional boolean telling the Machine to destroy itself once it's complete
	AutoDestroy pulumi.BoolPtrInput
	Cmds        pulumi.StringArrayInput
	// Which machine flavor, ex: `shared`
	CpuType     pulumi.StringPtrInput
	Cpus        pulumi.IntPtrInput
	Entrypoints pulumi.StringArrayInput
	// Keys and values must be strings
	Env   pulumi.StringMapInput
	Execs pulumi.StringArrayInput
	// Protocol-less docker image, ex: `registry.fly.io/myapp:mytag`
	Image pulumi.StringPtrInput
	// Amount of memory in MB. `256`, `512`, `1024`, ...
	Memory pulumi.IntPtrInput
	Mounts MachineMountArrayInput
	// A user-provided identifier
	Name      pulumi.StringPtrInput
	PrivateIp pulumi.StringPtrInput
	// Fly region, ex `ord`, `sin`, `mad`
	Region   pulumi.StringPtrInput
	Services MachineServiceArrayInput
}

func (MachineState) ElementType() reflect.Type {
	return reflect.TypeOf((*machineState)(nil)).Elem()
}

type machineArgs struct {
	// The App this resource will be created in
	App string `pulumi:"app"`
	// Optional boolean telling the Machine to destroy itself once it's complete
	AutoDestroy *bool    `pulumi:"autoDestroy"`
	Cmds        []string `pulumi:"cmds"`
	// Which machine flavor, ex: `shared`
	CpuType     *string  `pulumi:"cpuType"`
	Cpus        *int     `pulumi:"cpus"`
	Entrypoints []string `pulumi:"entrypoints"`
	// Keys and values must be strings
	Env   map[string]string `pulumi:"env"`
	Execs []string          `pulumi:"execs"`
	// Protocol-less docker image, ex: `registry.fly.io/myapp:mytag`
	Image string `pulumi:"image"`
	// Amount of memory in MB. `256`, `512`, `1024`, ...
	Memory *int           `pulumi:"memory"`
	Mounts []MachineMount `pulumi:"mounts"`
	// A user-provided identifier
	Name *string `pulumi:"name"`
	// Fly region, ex `ord`, `sin`, `mad`
	Region   string           `pulumi:"region"`
	Services []MachineService `pulumi:"services"`
}

// The set of arguments for constructing a Machine resource.
type MachineArgs struct {
	// The App this resource will be created in
	App pulumi.StringInput
	// Optional boolean telling the Machine to destroy itself once it's complete
	AutoDestroy pulumi.BoolPtrInput
	Cmds        pulumi.StringArrayInput
	// Which machine flavor, ex: `shared`
	CpuType     pulumi.StringPtrInput
	Cpus        pulumi.IntPtrInput
	Entrypoints pulumi.StringArrayInput
	// Keys and values must be strings
	Env   pulumi.StringMapInput
	Execs pulumi.StringArrayInput
	// Protocol-less docker image, ex: `registry.fly.io/myapp:mytag`
	Image pulumi.StringInput
	// Amount of memory in MB. `256`, `512`, `1024`, ...
	Memory pulumi.IntPtrInput
	Mounts MachineMountArrayInput
	// A user-provided identifier
	Name pulumi.StringPtrInput
	// Fly region, ex `ord`, `sin`, `mad`
	Region   pulumi.StringInput
	Services MachineServiceArrayInput
}

func (MachineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*machineArgs)(nil)).Elem()
}

type MachineInput interface {
	pulumi.Input

	ToMachineOutput() MachineOutput
	ToMachineOutputWithContext(ctx context.Context) MachineOutput
}

func (*Machine) ElementType() reflect.Type {
	return reflect.TypeOf((**Machine)(nil)).Elem()
}

func (i *Machine) ToMachineOutput() MachineOutput {
	return i.ToMachineOutputWithContext(context.Background())
}

func (i *Machine) ToMachineOutputWithContext(ctx context.Context) MachineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineOutput)
}

// MachineArrayInput is an input type that accepts MachineArray and MachineArrayOutput values.
// You can construct a concrete instance of `MachineArrayInput` via:
//
//	MachineArray{ MachineArgs{...} }
type MachineArrayInput interface {
	pulumi.Input

	ToMachineArrayOutput() MachineArrayOutput
	ToMachineArrayOutputWithContext(context.Context) MachineArrayOutput
}

type MachineArray []MachineInput

func (MachineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Machine)(nil)).Elem()
}

func (i MachineArray) ToMachineArrayOutput() MachineArrayOutput {
	return i.ToMachineArrayOutputWithContext(context.Background())
}

func (i MachineArray) ToMachineArrayOutputWithContext(ctx context.Context) MachineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineArrayOutput)
}

// MachineMapInput is an input type that accepts MachineMap and MachineMapOutput values.
// You can construct a concrete instance of `MachineMapInput` via:
//
//	MachineMap{ "key": MachineArgs{...} }
type MachineMapInput interface {
	pulumi.Input

	ToMachineMapOutput() MachineMapOutput
	ToMachineMapOutputWithContext(context.Context) MachineMapOutput
}

type MachineMap map[string]MachineInput

func (MachineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Machine)(nil)).Elem()
}

func (i MachineMap) ToMachineMapOutput() MachineMapOutput {
	return i.ToMachineMapOutputWithContext(context.Background())
}

func (i MachineMap) ToMachineMapOutputWithContext(ctx context.Context) MachineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineMapOutput)
}

type MachineOutput struct{ *pulumi.OutputState }

func (MachineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Machine)(nil)).Elem()
}

func (o MachineOutput) ToMachineOutput() MachineOutput {
	return o
}

func (o MachineOutput) ToMachineOutputWithContext(ctx context.Context) MachineOutput {
	return o
}

// The App this resource will be created in
func (o MachineOutput) App() pulumi.StringOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringOutput { return v.App }).(pulumi.StringOutput)
}

// Optional boolean telling the Machine to destroy itself once it's complete
func (o MachineOutput) AutoDestroy() pulumi.BoolOutput {
	return o.ApplyT(func(v *Machine) pulumi.BoolOutput { return v.AutoDestroy }).(pulumi.BoolOutput)
}

func (o MachineOutput) Cmds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringArrayOutput { return v.Cmds }).(pulumi.StringArrayOutput)
}

// Which machine flavor, ex: `shared`
func (o MachineOutput) CpuType() pulumi.StringOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringOutput { return v.CpuType }).(pulumi.StringOutput)
}

func (o MachineOutput) Cpus() pulumi.IntOutput {
	return o.ApplyT(func(v *Machine) pulumi.IntOutput { return v.Cpus }).(pulumi.IntOutput)
}

func (o MachineOutput) Entrypoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringArrayOutput { return v.Entrypoints }).(pulumi.StringArrayOutput)
}

// Keys and values must be strings
func (o MachineOutput) Env() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringMapOutput { return v.Env }).(pulumi.StringMapOutput)
}

func (o MachineOutput) Execs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringArrayOutput { return v.Execs }).(pulumi.StringArrayOutput)
}

// Protocol-less docker image, ex: `registry.fly.io/myapp:mytag`
func (o MachineOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringOutput { return v.Image }).(pulumi.StringOutput)
}

// Amount of memory in MB. `256`, `512`, `1024`, ...
func (o MachineOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v *Machine) pulumi.IntOutput { return v.Memory }).(pulumi.IntOutput)
}

func (o MachineOutput) Mounts() MachineMountArrayOutput {
	return o.ApplyT(func(v *Machine) MachineMountArrayOutput { return v.Mounts }).(MachineMountArrayOutput)
}

// A user-provided identifier
func (o MachineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MachineOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringOutput { return v.PrivateIp }).(pulumi.StringOutput)
}

// Fly region, ex `ord`, `sin`, `mad`
func (o MachineOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o MachineOutput) Services() MachineServiceArrayOutput {
	return o.ApplyT(func(v *Machine) MachineServiceArrayOutput { return v.Services }).(MachineServiceArrayOutput)
}

type MachineArrayOutput struct{ *pulumi.OutputState }

func (MachineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Machine)(nil)).Elem()
}

func (o MachineArrayOutput) ToMachineArrayOutput() MachineArrayOutput {
	return o
}

func (o MachineArrayOutput) ToMachineArrayOutputWithContext(ctx context.Context) MachineArrayOutput {
	return o
}

func (o MachineArrayOutput) Index(i pulumi.IntInput) MachineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Machine {
		return vs[0].([]*Machine)[vs[1].(int)]
	}).(MachineOutput)
}

type MachineMapOutput struct{ *pulumi.OutputState }

func (MachineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Machine)(nil)).Elem()
}

func (o MachineMapOutput) ToMachineMapOutput() MachineMapOutput {
	return o
}

func (o MachineMapOutput) ToMachineMapOutputWithContext(ctx context.Context) MachineMapOutput {
	return o
}

func (o MachineMapOutput) MapIndex(k pulumi.StringInput) MachineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Machine {
		return vs[0].(map[string]*Machine)[vs[1].(string)]
	}).(MachineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MachineInput)(nil)).Elem(), &Machine{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineArrayInput)(nil)).Elem(), MachineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineMapInput)(nil)).Elem(), MachineMap{})
	pulumi.RegisterOutputType(MachineOutput{})
	pulumi.RegisterOutputType(MachineArrayOutput{})
	pulumi.RegisterOutputType(MachineMapOutput{})
}
