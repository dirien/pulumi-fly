// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Fly certificate data source
func LookupCert(ctx *pulumi.Context, args *LookupCertArgs, opts ...pulumi.InvokeOption) (*LookupCertResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupCertResult
	err := ctx.Invoke("fly:index/getCert:getCert", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCert.
type LookupCertArgs struct {
	// Name of app attached to
	App string `pulumi:"app"`
	// hostname
	Hostname string `pulumi:"hostname"`
}

// A collection of values returned by getCert.
type LookupCertResult struct {
	// Name of app attached to
	App string `pulumi:"app"`
	// check
	Check bool `pulumi:"check"`
	// DnsValidationHostname
	Dnsvalidationhostname string `pulumi:"dnsvalidationhostname"`
	// DnsValidationHostname
	Dnsvalidationinstructions string `pulumi:"dnsvalidationinstructions"`
	// DnsValidationTarget
	Dnsvalidationtarget string `pulumi:"dnsvalidationtarget"`
	// hostname
	Hostname string `pulumi:"hostname"`
	// ID of certificate
	Id string `pulumi:"id"`
}

func LookupCertOutput(ctx *pulumi.Context, args LookupCertOutputArgs, opts ...pulumi.InvokeOption) LookupCertResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCertResult, error) {
			args := v.(LookupCertArgs)
			r, err := LookupCert(ctx, &args, opts...)
			var s LookupCertResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCertResultOutput)
}

// A collection of arguments for invoking getCert.
type LookupCertOutputArgs struct {
	// Name of app attached to
	App pulumi.StringInput `pulumi:"app"`
	// hostname
	Hostname pulumi.StringInput `pulumi:"hostname"`
}

func (LookupCertOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertArgs)(nil)).Elem()
}

// A collection of values returned by getCert.
type LookupCertResultOutput struct{ *pulumi.OutputState }

func (LookupCertResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertResult)(nil)).Elem()
}

func (o LookupCertResultOutput) ToLookupCertResultOutput() LookupCertResultOutput {
	return o
}

func (o LookupCertResultOutput) ToLookupCertResultOutputWithContext(ctx context.Context) LookupCertResultOutput {
	return o
}

// Name of app attached to
func (o LookupCertResultOutput) App() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertResult) string { return v.App }).(pulumi.StringOutput)
}

// check
func (o LookupCertResultOutput) Check() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCertResult) bool { return v.Check }).(pulumi.BoolOutput)
}

// DnsValidationHostname
func (o LookupCertResultOutput) Dnsvalidationhostname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertResult) string { return v.Dnsvalidationhostname }).(pulumi.StringOutput)
}

// DnsValidationHostname
func (o LookupCertResultOutput) Dnsvalidationinstructions() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertResult) string { return v.Dnsvalidationinstructions }).(pulumi.StringOutput)
}

// DnsValidationTarget
func (o LookupCertResultOutput) Dnsvalidationtarget() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertResult) string { return v.Dnsvalidationtarget }).(pulumi.StringOutput)
}

// hostname
func (o LookupCertResultOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertResult) string { return v.Hostname }).(pulumi.StringOutput)
}

// ID of certificate
func (o LookupCertResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCertResultOutput{})
}
