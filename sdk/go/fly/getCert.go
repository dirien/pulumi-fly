// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fly

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-fly/sdk/go/fly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupCert(ctx *pulumi.Context, args *LookupCertArgs, opts ...pulumi.InvokeOption) (*LookupCertResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCertResult
	err := ctx.Invoke("fly:index/getCert:getCert", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCert.
type LookupCertArgs struct {
	// The App this resource will be created in
	App      string `pulumi:"app"`
	Hostname string `pulumi:"hostname"`
}

// A collection of values returned by getCert.
type LookupCertResult struct {
	// The App this resource will be created in
	App                       string `pulumi:"app"`
	Check                     bool   `pulumi:"check"`
	DnsValidationHostname     string `pulumi:"dnsValidationHostname"`
	DnsValidationInstructions string `pulumi:"dnsValidationInstructions"`
	DnsValidationTarget       string `pulumi:"dnsValidationTarget"`
	Hostname                  string `pulumi:"hostname"`
	// A fly-generated ID
	Id string `pulumi:"id"`
}

func LookupCertOutput(ctx *pulumi.Context, args LookupCertOutputArgs, opts ...pulumi.InvokeOption) LookupCertResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCertResultOutput, error) {
			args := v.(LookupCertArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupCertResult
			secret, err := ctx.InvokePackageRaw("fly:index/getCert:getCert", args, &rv, "", opts...)
			if err != nil {
				return LookupCertResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupCertResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupCertResultOutput), nil
			}
			return output, nil
		}).(LookupCertResultOutput)
}

// A collection of arguments for invoking getCert.
type LookupCertOutputArgs struct {
	// The App this resource will be created in
	App      pulumi.StringInput `pulumi:"app"`
	Hostname pulumi.StringInput `pulumi:"hostname"`
}

func (LookupCertOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertArgs)(nil)).Elem()
}

// A collection of values returned by getCert.
type LookupCertResultOutput struct{ *pulumi.OutputState }

func (LookupCertResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertResult)(nil)).Elem()
}

func (o LookupCertResultOutput) ToLookupCertResultOutput() LookupCertResultOutput {
	return o
}

func (o LookupCertResultOutput) ToLookupCertResultOutputWithContext(ctx context.Context) LookupCertResultOutput {
	return o
}

// The App this resource will be created in
func (o LookupCertResultOutput) App() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertResult) string { return v.App }).(pulumi.StringOutput)
}

func (o LookupCertResultOutput) Check() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCertResult) bool { return v.Check }).(pulumi.BoolOutput)
}

func (o LookupCertResultOutput) DnsValidationHostname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertResult) string { return v.DnsValidationHostname }).(pulumi.StringOutput)
}

func (o LookupCertResultOutput) DnsValidationInstructions() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertResult) string { return v.DnsValidationInstructions }).(pulumi.StringOutput)
}

func (o LookupCertResultOutput) DnsValidationTarget() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertResult) string { return v.DnsValidationTarget }).(pulumi.StringOutput)
}

func (o LookupCertResultOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertResult) string { return v.Hostname }).(pulumi.StringOutput)
}

// A fly-generated ID
func (o LookupCertResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCertResultOutput{})
}
