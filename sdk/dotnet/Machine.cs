// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Fly
{
    [FlyResourceType("fly:index/machine:Machine")]
    public partial class Machine : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The App this resource will be created in
        /// </summary>
        [Output("app")]
        public Output<string> App { get; private set; } = null!;

        /// <summary>
        /// Optional boolean telling the Machine to destroy itself once it's complete
        /// </summary>
        [Output("autoDestroy")]
        public Output<bool> AutoDestroy { get; private set; } = null!;

        [Output("cmds")]
        public Output<ImmutableArray<string>> Cmds { get; private set; } = null!;

        /// <summary>
        /// Which machine flavor, ex: `shared`
        /// </summary>
        [Output("cpuType")]
        public Output<string> CpuType { get; private set; } = null!;

        [Output("cpus")]
        public Output<int> Cpus { get; private set; } = null!;

        [Output("entrypoints")]
        public Output<ImmutableArray<string>> Entrypoints { get; private set; } = null!;

        /// <summary>
        /// Keys and values must be strings
        /// </summary>
        [Output("env")]
        public Output<ImmutableDictionary<string, string>> Env { get; private set; } = null!;

        [Output("execs")]
        public Output<ImmutableArray<string>> Execs { get; private set; } = null!;

        /// <summary>
        /// Protocol-less docker image, ex: `registry.fly.io/myapp:mytag`
        /// </summary>
        [Output("image")]
        public Output<string> Image { get; private set; } = null!;

        /// <summary>
        /// Amount of memory in MB. `256`, `512`, `1024`, ...
        /// </summary>
        [Output("memory")]
        public Output<int> Memory { get; private set; } = null!;

        [Output("mounts")]
        public Output<ImmutableArray<Outputs.MachineMount>> Mounts { get; private set; } = null!;

        /// <summary>
        /// A user-provided identifier
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("privateIp")]
        public Output<string> PrivateIp { get; private set; } = null!;

        /// <summary>
        /// Fly region, ex `ord`, `sin`, `mad`
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("services")]
        public Output<ImmutableArray<Outputs.MachineService>> Services { get; private set; } = null!;


        /// <summary>
        /// Create a Machine resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Machine(string name, MachineArgs args, CustomResourceOptions? options = null)
            : base("fly:index/machine:Machine", name, args ?? new MachineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Machine(string name, Input<string> id, MachineState? state = null, CustomResourceOptions? options = null)
            : base("fly:index/machine:Machine", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-fly",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Machine resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Machine Get(string name, Input<string> id, MachineState? state = null, CustomResourceOptions? options = null)
        {
            return new Machine(name, id, state, options);
        }
    }

    public sealed class MachineArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The App this resource will be created in
        /// </summary>
        [Input("app", required: true)]
        public Input<string> App { get; set; } = null!;

        /// <summary>
        /// Optional boolean telling the Machine to destroy itself once it's complete
        /// </summary>
        [Input("autoDestroy")]
        public Input<bool>? AutoDestroy { get; set; }

        [Input("cmds")]
        private InputList<string>? _cmds;
        public InputList<string> Cmds
        {
            get => _cmds ?? (_cmds = new InputList<string>());
            set => _cmds = value;
        }

        /// <summary>
        /// Which machine flavor, ex: `shared`
        /// </summary>
        [Input("cpuType")]
        public Input<string>? CpuType { get; set; }

        [Input("cpus")]
        public Input<int>? Cpus { get; set; }

        [Input("entrypoints")]
        private InputList<string>? _entrypoints;
        public InputList<string> Entrypoints
        {
            get => _entrypoints ?? (_entrypoints = new InputList<string>());
            set => _entrypoints = value;
        }

        [Input("env")]
        private InputMap<string>? _env;

        /// <summary>
        /// Keys and values must be strings
        /// </summary>
        public InputMap<string> Env
        {
            get => _env ?? (_env = new InputMap<string>());
            set => _env = value;
        }

        [Input("execs")]
        private InputList<string>? _execs;
        public InputList<string> Execs
        {
            get => _execs ?? (_execs = new InputList<string>());
            set => _execs = value;
        }

        /// <summary>
        /// Protocol-less docker image, ex: `registry.fly.io/myapp:mytag`
        /// </summary>
        [Input("image", required: true)]
        public Input<string> Image { get; set; } = null!;

        /// <summary>
        /// Amount of memory in MB. `256`, `512`, `1024`, ...
        /// </summary>
        [Input("memory")]
        public Input<int>? Memory { get; set; }

        [Input("mounts")]
        private InputList<Inputs.MachineMountArgs>? _mounts;
        public InputList<Inputs.MachineMountArgs> Mounts
        {
            get => _mounts ?? (_mounts = new InputList<Inputs.MachineMountArgs>());
            set => _mounts = value;
        }

        /// <summary>
        /// A user-provided identifier
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Fly region, ex `ord`, `sin`, `mad`
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        [Input("services")]
        private InputList<Inputs.MachineServiceArgs>? _services;
        public InputList<Inputs.MachineServiceArgs> Services
        {
            get => _services ?? (_services = new InputList<Inputs.MachineServiceArgs>());
            set => _services = value;
        }

        public MachineArgs()
        {
        }
        public static new MachineArgs Empty => new MachineArgs();
    }

    public sealed class MachineState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The App this resource will be created in
        /// </summary>
        [Input("app")]
        public Input<string>? App { get; set; }

        /// <summary>
        /// Optional boolean telling the Machine to destroy itself once it's complete
        /// </summary>
        [Input("autoDestroy")]
        public Input<bool>? AutoDestroy { get; set; }

        [Input("cmds")]
        private InputList<string>? _cmds;
        public InputList<string> Cmds
        {
            get => _cmds ?? (_cmds = new InputList<string>());
            set => _cmds = value;
        }

        /// <summary>
        /// Which machine flavor, ex: `shared`
        /// </summary>
        [Input("cpuType")]
        public Input<string>? CpuType { get; set; }

        [Input("cpus")]
        public Input<int>? Cpus { get; set; }

        [Input("entrypoints")]
        private InputList<string>? _entrypoints;
        public InputList<string> Entrypoints
        {
            get => _entrypoints ?? (_entrypoints = new InputList<string>());
            set => _entrypoints = value;
        }

        [Input("env")]
        private InputMap<string>? _env;

        /// <summary>
        /// Keys and values must be strings
        /// </summary>
        public InputMap<string> Env
        {
            get => _env ?? (_env = new InputMap<string>());
            set => _env = value;
        }

        [Input("execs")]
        private InputList<string>? _execs;
        public InputList<string> Execs
        {
            get => _execs ?? (_execs = new InputList<string>());
            set => _execs = value;
        }

        /// <summary>
        /// Protocol-less docker image, ex: `registry.fly.io/myapp:mytag`
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        /// <summary>
        /// Amount of memory in MB. `256`, `512`, `1024`, ...
        /// </summary>
        [Input("memory")]
        public Input<int>? Memory { get; set; }

        [Input("mounts")]
        private InputList<Inputs.MachineMountGetArgs>? _mounts;
        public InputList<Inputs.MachineMountGetArgs> Mounts
        {
            get => _mounts ?? (_mounts = new InputList<Inputs.MachineMountGetArgs>());
            set => _mounts = value;
        }

        /// <summary>
        /// A user-provided identifier
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateIp")]
        public Input<string>? PrivateIp { get; set; }

        /// <summary>
        /// Fly region, ex `ord`, `sin`, `mad`
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("services")]
        private InputList<Inputs.MachineServiceGetArgs>? _services;
        public InputList<Inputs.MachineServiceGetArgs> Services
        {
            get => _services ?? (_services = new InputList<Inputs.MachineServiceGetArgs>());
            set => _services = value;
        }

        public MachineState()
        {
        }
        public static new MachineState Empty => new MachineState();
    }
}
